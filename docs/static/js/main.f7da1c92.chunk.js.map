{"version":3,"sources":["components/GlobalMenuItem.js","components/GlobalMenu.js","actions/global_menu.js","pages/PageHome.js","pages/PageA.js","pages/PageB.js","pages/PageC.js","App.js","serviceWorker.js","reducers/global_menu.js","reducers/modals.js","reducers/page_a.js","reducers/page_b.js","reducers/page_c.js","reducers/page_home.js","reducers/index.js","Store.js","index.js"],"names":["GlobalMenuItem","props","style","root","normal","color","fontWeight","background","padding","borderRadius","marginTop","selected","root_style","source","select","to","textDecoration","code","onClick","callbacks","click","label","connect","state","global_menu","dispatch","selectedMenu","nodes","type","menu","e","target","getAttribute","menus","find","d","position","left","top","height","map","key","PageHome","PageA","PageB","PageC","App","className","exact","path","component","GlobalMenu","Boolean","window","location","hostname","match","action","new_state","m","modals","page_a","page_b","page_c","page_home","combineReducers","Store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7da1c92.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nfunction GlobalMenuItem (props) {\n    const style = {\n        root: {\n            normal: {\n                color: '#f3f3f3',\n                fontWeight: 'bold',\n                background: 'none',\n                padding: '8px 11px',\n                borderRadius: '5px',\n                marginTop: '11px',\n            },\n            selected: {\n                color: 'rgb(235,85,5)',\n                fontWeight: 'bold',\n                background: '#f3f3f3',\n                padding: '8px 11px',\n                borderRadius: '5px',\n                marginTop: '11px',\n            },\n        },\n    };\n\n    const root_style = props.source.select ? style.root.selected : style.root.normal;\n\n    return (\n        <Link to={props.source.to}\n              style={{textDecoration: 'none'}}>\n          <div style={root_style}\n               code={props.source.code}\n               onClick={props.callbacks.click}>\n            {props.source.label}\n          </div>\n        </Link>\n    );\n}\n\nexport default GlobalMenuItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport GlobalMenuItem from './GlobalMenuItem';\n\nimport { selectedMenu } from '../actions/global_menu.js';\n\nfunction GlobalMenu (props) {\n    const style = {\n        root: {\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            height: '100%',\n            background: 'rgb(235,85,5)',\n            padding: '11px',\n        },\n    };\n\n    const callbacks = {\n        click: (e) => {\n            let code = e.target.getAttribute('code');\n            let menu = props.source.menus.find((d)=> {\n                return d.code === code;\n            });\n            props.selectedMenu(menu);\n        }\n    };\n\n    return (\n        <div style={style.root}>\n          {props.source.menus.map((d) => {\n              return <GlobalMenuItem key={d.code}\n                                     source={d}\n                                     callbacks={callbacks} />;\n          })}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        source:  state.global_menu,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    selectedMenu: (nodes) => {\n        return dispatch(selectedMenu(nodes));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(GlobalMenu);\n","export const SELECTED_MENU = 'SELECTED_MENU';\r\n\r\nexport const selectedMenu = (menu) => {\r\n    return ({\r\n        type: SELECTED_MENU,\r\n        menu: menu,\r\n    });\r\n};\r\n","import React from 'react';\n\nfunction PageHome() {\n    return (\n        <div>\n        </div>\n  );\n}\n\nexport default PageHome;\n","import React from 'react';\n\nfunction PageA() {\n    return (\n        <div>PageA</div>\n  );\n}\n\nexport default PageA;\n","import React from 'react';\n\nfunction PageB () {\n    return (\n        <div>PageB</div>\n  );\n}\n\nexport default PageB;\n","import React from 'react';\n\nfunction PageC () {\n    return (\n        <div>PageC</div>\n  );\n}\n\nexport default PageC;\n","import React from 'react';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport GlobalMenu from './components/GlobalMenu.js';\n\nimport PageHome from './pages/PageHome';\nimport PageA from './pages/PageA';\nimport PageB from './pages/PageB';\nimport PageC from './pages/PageC';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <Router>\n              <Switch>\n                <Route exact path='/' component={PageHome} />\n                <Route exact path='/a' component={PageA} />\n                <Route exact path='/b' component={PageB} />\n                <Route exact path='/c' component={PageC} />\n              </Switch>\n\n            <Route component={GlobalMenu} />\n          </Router>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SELECTED_MENU } from '../actions/global_menu.js';\r\n\r\nconst selectedMenu = (state, action) => {\r\n    let new_state = {...state};\r\n\r\n    for (let m of new_state.menus)\r\n        m.select = (m.code===action.menu.code);\r\n\r\n    return new_state;\r\n};\r\n\r\nconst global_menu = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    case SELECTED_MENU:\r\n        return selectedMenu(state, action);\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default global_menu;\r\n","const modals = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default modals;\r\n","const page_a = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default page_a;\r\n","const page_b = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default page_b;\r\n","const page_c = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default page_c;\r\n","const page_home = (state = [], action) => {\r\n    switch (action.type) {\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default page_home;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport global_menu from './global_menu';\r\nimport modals from './modals';\r\nimport page_a from './page_a';\r\nimport page_b from './page_b';\r\nimport page_c from './page_c';\r\nimport page_home from './page_home';\r\n\r\nexport default combineReducers({\r\n    global_menu,\r\n    modals,\r\n    page_a,\r\n    page_b,\r\n    page_c,\r\n    page_home,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from './reducers';\n\nlet StoreModel = {\n    modals: {},\n    page_home: {},\n    page_a: {},\n    page_b: {},\n    page_c: {},\n    global_menu: {\n        menus: [\n            { code: 'a', label: 'Home',   to: '/',  select: true },\n            { code: 'b', label: 'Page A', to: '/a', select: false },\n            { code: 'c', label: 'Page B', to: '/b', select: false },\n            { code: 'd', label: 'Page C', to: '/c', select: false },\n        ],\n    },\n};\n\nconst Store = createStore(\n    rootReducer,\n    StoreModel,\n    applyMiddleware(\n        thunk,\n        logger,\n    ),\n);\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from './Store.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}